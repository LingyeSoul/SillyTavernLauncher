name: Build Windows Flet App

on:
  push:
    branches:
      - main
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    permissions:
      contents: write
    env:
      APP_NAME: SillyTavernLauncher
      PRODUCT_NAME: "ÈÖíÈ¶ÜÂêØÂä®Âô®"
      COMPANY_NAME: LingyeSoul
      ICON_PATH: src/assets/icon.ico
      DIST_PATH: dist
      COPYRIGHT: "Copyright (c) 2025 LingyeSoul"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Clean workspace
        run: |
          if (Test-Path $env:DIST_PATH) { Remove-Item -Recurse -Force $env:DIST_PATH }
          if (Test-Path *.zip) { Remove-Item -Force *.zip }
        shell: pwsh

      - name: Cache GitVersion
        uses: actions/cache@v4
        with:
          path: C:\GitVersion
          key: gitversion-5.x
          restore-keys: gitversion-

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.13
        with:
          versionSpec: '5.x'

      - name: Get version number
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.13

      - name: Extract version info
        run: |
          echo "SEMVER=${{ steps.gitversion.outputs.SemVer }}" >> $GITHUB_ENV
          echo "MAJOR=${{ steps.gitversion.outputs.Major }}" >> $GITHUB_ENV
          echo "MINOR=${{ steps.gitversion.outputs.Minor }}" >> $GITHUB_ENV
          echo "PATCH=${{ steps.gitversion.outputs.Patch }}" >> $GITHUB_ENV
        shell: bash

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Upgrade pip and install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flet pyinstaller ruamel.yaml packaging Nuitka flet-desktop==0.28.3

      - name: Install custom flet-cli
        run: |
          # Install custom flet-cli version
          pip install git+https://github.com/LingyeSoul/flet_cli.git@main
          
          # Verify installation
          echo "=== Installed flet-cli info ==="
          pip show flet-cli
          
          # Verify flet command availability
          flet --version
          flet pack --help
        shell: pwsh

      - name: Package application
        run: |
          flet packn src/main.py `
            --icon "$env:ICON_PATH" `
            --name "$env:APP_NAME" `
            --product-name "$env:PRODUCT_NAME" `
            --file-description "$env:APP_NAME $env:PRODUCT_NAME" `
            --product-version "$env:SEMVER" `
            --copyright "$env:COPYRIGHT" `
            --distpath "$env:DIST_PATH" `
            --yes
        shell: pwsh

      - name: Check packaging results
        run: |
          Write-Host "=== Check dist directory structure ==="
          if (Test-Path $env:DIST_PATH) {
            Get-ChildItem -Path $env:DIST_PATH -Recurse | ForEach-Object { Write-Host $_.FullName }
            
            # Check if main.dist directory exists
            $mainDistPath = Join-Path $env:DIST_PATH "main.dist"
            if (Test-Path $mainDistPath) {
              Write-Host "‚úÖ Found main.dist directory"
              Write-Host "=== main.dist directory contents ==="
              Get-ChildItem -Path $mainDistPath | ForEach-Object { Write-Host $_.Name }
            } else {
              Write-Host "‚ùå main.dist directory not found"
              Write-Host "=== Direct contents of dist directory ==="
              Get-ChildItem -Path $env:DIST_PATH | ForEach-Object { Write-Host $_.Name }
            }
          } else {
            Write-Host "‚ùå dist directory does not exist"
          }
        shell: pwsh

      - name: Compress dist to ZIP (handle Nuitka output)
        id: compress_dist
        run: |
          $zipName = "$env:APP_NAME-win-v${{ env.SEMVER }}.zip"
          
          # Check packaging structure and compress accordingly
          $mainDistPath = Join-Path $env:DIST_PATH "main.dist"
          if (Test-Path $mainDistPath) {
            Write-Host "üì¶ Detected Nuitka packaging structure, compressing main.dist directory"
            # If main.dist exists, compress its contents
            Compress-Archive -Path "$mainDistPath\*" -DestinationPath $zipName -Force
          } else {
            Write-Host "üì¶ Standard packaging structure, compressing entire dist directory"
            # Otherwise compress the entire dist directory
            Compress-Archive -Path "$env:DIST_PATH\*" -DestinationPath $zipName -Force
          }
          
          echo "zip_name=$zipName" >> $env:GITHUB_OUTPUT
          Write-Host "‚úÖ ZIP file created: $zipName"
        shell: pwsh

      - name: Validate ZIP file
        run: |
          $path = "${{ steps.compress_dist.outputs.zip_name }}"
          if (-Not (Test-Path $path)) {
              throw "‚ùå ZIP file not generated: $path"
          }
          $size = (Get-Item $path).Length / 1MB
          Write-Host "‚úÖ ZIP file exists: $path (Size: $([math]::Round($size, 2)) MB)"
          
          # Optional: Check ZIP file contents
          Write-Host "=== ZIP file contents ==="
          try {
            Add-Type -AssemblyName System.IO.Compression.FileSystem
            $zip = [System.IO.Compression.ZipFile]::OpenRead($path)
            $zip.Entries | ForEach-Object { Write-Host $_.FullName }
            $zip.Dispose()
          } catch {
            Write-Host "‚ö†Ô∏è Unable to inspect ZIP contents in detail, but file exists"
          }
        shell: pwsh

      - name: Get current time (Shanghai timezone, Chinese format)
        id: timestamp
        run: |
          $tz = [System.TimeZoneInfo]::FindSystemTimeZoneById("China Standard Time")
          $now = [System.TimeZoneInfo]::ConvertTimeFromUtc((Get-Date).ToUniversalTime(), $tz)
          $formatted = $now.ToString("yyyyÂπ¥MMÊúàddÊó• HHÊó∂mmÂàÜssÁßí")
          "now=$formatted" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: pwsh

      - name: Generate changelog (last 5 commits)
        id: changelog
        run: |
          $log = git log --pretty=format:"* [%h] %s (%an)" -n 5
          Add-Content -Path $env:GITHUB_OUTPUT -Value "log<<EOF"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "$log"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "EOF"
        shell: pwsh

      - name: Create Release and upload ZIP (only on release trigger)
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.compress_dist.outputs.zip_name }}
          tag_name: v${{ env.SEMVER }}
          name: Release v${{ env.SEMVER }}
          body: |
            # üöÄ ${{ env.PRODUCT_NAME }} v${{ env.SEMVER }} ÂèëÂ∏ÉÔºÅ

            ## üõ†Ô∏è Êõ¥Êñ∞ÂÜÖÂÆπ

            ${{ steps.changelog.outputs.log }}

            ## üì¶ ÊûÑÂª∫‰ø°ÊÅØ

            - ÊâìÂåÖÊó∂Èó¥Ôºö${{ steps.timestamp.outputs.now }}
            - ÁâàÊú¨Âè∑Ôºöv${{ env.SEMVER }}
            - ÊûÑÂª∫Á≥ªÁªüÔºöWindows
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Artifact (for debugging or download)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-windows-v${{ env.SEMVER }}
          path: ${{ steps.compress_dist.outputs.zip_name }}
          if-no-files-found: error
